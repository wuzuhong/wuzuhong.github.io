function getBlog(){
	return blog = {"content": "# 【消息中间件-Kafka】认证权限控制（ SASL/PLAIN + SSL ）\n\n## 生成证书\n\n注意：生成证书时的jdk版本要与Broker、Client运行时的jdk版本一致，否则会导致证书格式不匹配的问题。\n\n* Keystore：包含经过CA签名的自己的证书，用于提供给他人。\n* Truststore：包含CA证书（公钥），用于验证他人的证书。\n\n#### 生成CA证书，包括CA私钥（ca-key）、CA证书（ca-cert）\n```bash\nopenssl req -new -x509 -keyout ca-key -out ca-cert -days 365\n```\n#### 生成 Broker 的 Keystore\n```bash\nkeytool -keystore server.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA -storepass test123 -keypass test123\n```\n#### 签名 Broker 的 Keystore\n```bash\n# 生成证书签名请求CSR\nkeytool -keystore server.keystore.jks -alias localhost -certreq -file server-cert-file\n# 用CA签名CSR，并输出签名后的Broker证书\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in server-cert-file -out server-cert-signed -days 365 -CAcreateserial\n# 导入CA证书到Broker的Keystore\nkeytool -keystore server.keystore.jks -alias CA -import -file ca-cert\n# 导入签名后的Broker证书\nkeytool -keystore server.keystore.jks -alias localhost -import -file server-cert-signed\n```\n#### 生成 Broker 的 Truststore\n```bash\nkeytool -keystore server.truststore.jks -alias CARoot -import -file ca-cert\n```\n#### 生成 Client 的 Keystore\n```bash\nkeytool -keystore client.keystore.jks -alias localhost -validity 365 -genkey -keyalg RSA -storepass test123 -keypass test123\n```\n#### 签名 Client 的 Keystore\n```bash\n# 生成证书签名请求CSR\nkeytool -keystore client.keystore.jks -alias localhost -certreq -file client-cert-file\n# 用CA签名CSR，并输出签名后的Client证书\nopenssl x509 -req -CA ca-cert -CAkey ca-key -in client-cert-file -out client-cert-signed -days 365 -CAcreateserial\n# 导入CA证书到Client的Keystore\nkeytool -keystore client.keystore.jks -alias CA -import -file ca-cert\n# 导入签名后的Client证书\nkeytool -keystore client.keystore.jks -alias localhost -import -file client-cert-signed\n```\n#### 生成 Client 的 Truststore\n```bash\nkeytool -keystore client.truststore.jks -alias CARoot -import -file ca-cert\n```\n\n## 在 Broker 中开启权限控制（ SASL/PLAIN + SSL ）\n* 在`config/kraft/server.properties`配置文件中添加以下配置：\n```properties\n# 监听SASL_SSL协议\nlisteners=SASL_SSL://:9092\n# 启用SSL加密\nssl.keystore.location=/path/to/server.keystore.jks\nssl.keystore.password=test123\nssl.key.password=test123\nssl.truststore.location=/path/to/server.truststore.jks\nssl.truststore.password=test123\nssl.client.auth=required\n# 启用SASL/PLAIN认证\ninter.broker.listener.name=SASL_SSL\nsasl.mechanism.inter.broker.protocol=PLAIN\nsasl.enabled.mechanisms=PLAIN\n```\n* 创建`kafka_server_jaas.conf`文件，文件内容如下。其中`username`和`password`是用于在集群模式下 Broker 之间的通信。`user_xx`是用于 Broker 与客户端之间的通信，比如`user_demo=\"demo-secret\"`代表用户名为`demo`、秘钥为`demo-secret`：\n```\nKafkaServer {\n    org.apache.kafka.common.security.plain.PlainLoginModule required\n    username=\"admin\"\n    password=\"admin-secret\"\n    user_admin=\"admin-secret\"\n    user_alice=\"alice-secret\";\n};\n```\n* 启动 Broker（3.6.2）：\n```bash\n# 生成集群ID\nbin/windows/kafka-storage.bat format -t EpPlSoxkQG6zltzYh0594g -c config/kraft/server.properties\n# 添加KAFKA_OPTS环境变量\n$env:KAFKA_OPTS=\"-Djava.security.auth.login.config=/path/to/kafka_server_jaas.conf\"\n# 启动Broker\nbin/windows/kafka-server-start.bat config/kraft/server.properties\n```\n\n## 在客户端中开启权限控制（ SASL/PLAIN + SSL ）\n```\nsecurity.protocol=SASL_SSL\nsasl.mechanism=PLAIN\n# SASL/PLAIN认证配置\nsasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required username=\"xx\" password=\"xx\";\n# SSL加密配置\nssl.truststore.location=/path/to/client.truststore.jks\nssl.truststore.password=test123\nssl.keystore.location=/path/to/client.keystore.jks\nssl.keystore.password=test123\nssl.key.password=test123\n# 设置不需要验证主机名\nssl.endpoint.identification.algorithm=\n```", "title": "【消息中间件-Kafka】认证权限控制（ SASL/PLAIN + SSL ）"}
}
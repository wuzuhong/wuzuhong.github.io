function getBlog(){
	return blog = {"content": "# 【流程引擎-Flowable】Flowable使用示例\n\n## 流程设计示例\n\n#### 会签流程\n\n需要注意：\n* 任务1为会签任务，任务2为普通任务\n* `flowable:assignee`参数表示任务处理人。`isSequential`参数表示是并行会签还是串行会签。`flowable:collection`参数表示会签人员集合，需要在流程启动时采用流程变量的形式进行设置。`flowable:elementVariable`参数表示对会签人员集合遍历后设置的字段，通常会与任务处理人保持一致。`${nrOfCompletedInstances/nrOfInstances&gt;=0.5}`表示完成条件为大于等于50%的会签人员完成了自己的任务就代表这个会签任务完成了。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\">\n  <process id=\"DEMO_PROCESS\" name=\"DEMO_PROCESS\" isExecutable=\"true\">\n    <startEvent id=\"startEvent1\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"sid-68B49661-E99F-4F55-B2B1-2DB431A43800\" name=\"任务1\" flowable:assignee=\"${assignee}\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n      <multiInstanceLoopCharacteristics isSequential=\"false\" flowable:collection=\"assigneeList\" flowable:elementVariable=\"assignee\">\n        <completionCondition>${nrOfCompletedInstances/nrOfInstances&gt;=0.5}</completionCondition>\n      </multiInstanceLoopCharacteristics>\n    </userTask>\n    <sequenceFlow id=\"sid-3FF23E94-5C09-4A3B-AE50-EC24F373C4F5\" sourceRef=\"startEvent1\" targetRef=\"sid-68B49661-E99F-4F55-B2B1-2DB431A43800\"></sequenceFlow>\n    <userTask id=\"sid-4B932DAD-43AE-4D48-8E33-5013C47B3FAC\" name=\"任务2\" flowable:assignee=\"user2\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-0ACE8CED-F1E2-4C49-A04E-FB21ACDEA8A5\" sourceRef=\"sid-68B49661-E99F-4F55-B2B1-2DB431A43800\" targetRef=\"sid-4B932DAD-43AE-4D48-8E33-5013C47B3FAC\"></sequenceFlow>\n    <endEvent id=\"sid-83D058FE-1C23-41FF-97E9-52306A1536A5\"></endEvent>\n    <sequenceFlow id=\"sid-6623373C-F9AE-448F-87B6-0CE382FC0A52\" sourceRef=\"sid-4B932DAD-43AE-4D48-8E33-5013C47B3FAC\" targetRef=\"sid-83D058FE-1C23-41FF-97E9-52306A1536A5\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_DEMO_PROCESS\">\n    <bpmndi:BPMNPlane bpmnElement=\"DEMO_PROCESS\" id=\"BPMNPlane_DEMO_PROCESS\">\n      <bpmndi:BPMNShape bpmnElement=\"startEvent1\" id=\"BPMNShape_startEvent1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"100.0\" y=\"163.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-68B49661-E99F-4F55-B2B1-2DB431A43800\" id=\"BPMNShape_sid-68B49661-E99F-4F55-B2B1-2DB431A43800\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"175.0\" y=\"138.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-4B932DAD-43AE-4D48-8E33-5013C47B3FAC\" id=\"BPMNShape_sid-4B932DAD-43AE-4D48-8E33-5013C47B3FAC\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"330.0\" y=\"135.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-83D058FE-1C23-41FF-97E9-52306A1536A5\" id=\"BPMNShape_sid-83D058FE-1C23-41FF-97E9-52306A1536A5\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"465.0\" y=\"161.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-3FF23E94-5C09-4A3B-AE50-EC24F373C4F5\" id=\"BPMNEdge_sid-3FF23E94-5C09-4A3B-AE50-EC24F373C4F5\">\n        <omgdi:waypoint x=\"129.9499984899576\" y=\"178.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"174.9999999999917\" y=\"178.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-0ACE8CED-F1E2-4C49-A04E-FB21ACDEA8A5\" id=\"BPMNEdge_sid-0ACE8CED-F1E2-4C49-A04E-FB21ACDEA8A5\">\n        <omgdi:waypoint x=\"274.9499999999995\" y=\"177.0322580645161\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"330.0\" y=\"175.96677419354836\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-6623373C-F9AE-448F-87B6-0CE382FC0A52\" id=\"BPMNEdge_sid-6623373C-F9AE-448F-87B6-0CE382FC0A52\">\n        <omgdi:waypoint x=\"429.95000000000005\" y=\"175.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"465.0\" y=\"175.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n#### 调用子流程\n\n需要注意：\n* 子流程通常分为嵌套子流程和调用子流程。调用子流程的使用场景通常为跨部门协作，当A部门的流程需要走B部门流程，但是A部门流程又不清楚B部门的流程是啥样的，这个时候A部门的流程就可以使用引用B部门的流程作为它的调用子流程。调用子流程的另一个作用就是流程复用。嵌套子流程的作用就是可以折叠，让一个复杂的流程更加清晰。\n* `calledElement`参数表示调用子流程的标识。`flowable:calledElementType`参数表示调用子流程的标识类型。`source`参数表示输入参数在当前流程的流程变量。`target`参数表示输入参数在子流程的流程变量，与`source`是对应的。\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<definitions xmlns=\"http://www.omg.org/spec/BPMN/20100524/MODEL\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:flowable=\"http://flowable.org/bpmn\" xmlns:bpmndi=\"http://www.omg.org/spec/BPMN/20100524/DI\" xmlns:omgdc=\"http://www.omg.org/spec/DD/20100524/DC\" xmlns:omgdi=\"http://www.omg.org/spec/DD/20100524/DI\" typeLanguage=\"http://www.w3.org/2001/XMLSchema\" expressionLanguage=\"http://www.w3.org/1999/XPath\" targetNamespace=\"http://www.flowable.org/processdef\">\n  <process id=\"DEMO_PROCESS_WITH_CHILD\" name=\"DEMO_PROCESS_WITH_CHILD\" isExecutable=\"true\">\n    <startEvent id=\"startEvent1\" flowable:formFieldValidation=\"true\"></startEvent>\n    <userTask id=\"sid-FCC03139-5216-4B7D-82C6-E20E4B49F9EE\" name=\"用户任务0\" flowable:assignee=\"user0\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-B40A6A16-4A73-40B5-B838-63D0A4CBEAD3\" sourceRef=\"startEvent1\" targetRef=\"sid-FCC03139-5216-4B7D-82C6-E20E4B49F9EE\"></sequenceFlow>\n    <callActivity id=\"sid-972AC3BE-C69B-4076-84C6-87362F3DE9F0\" name=\"调用子流程\" calledElement=\"DEMO_PROCESS:2:09453f00-783b-11ed-88c2-7c10c923bb6d\" flowable:calledElementType=\"id\" flowable:fallbackToDefaultTenant=\"false\">\n      <extensionElements>\n        <flowable:in source=\"assigneeList\" target=\"assigneeList\"></flowable:in>\n      </extensionElements>\n    </callActivity>\n    <sequenceFlow id=\"sid-692C6DD2-B500-4CC5-A566-FC42B3852A3C\" sourceRef=\"sid-FCC03139-5216-4B7D-82C6-E20E4B49F9EE\" targetRef=\"sid-972AC3BE-C69B-4076-84C6-87362F3DE9F0\"></sequenceFlow>\n    <userTask id=\"sid-D3495ABF-E602-4758-85D4-9F74093447DD\" name=\"用户任务3\" flowable:assignee=\"user3\" flowable:formFieldValidation=\"true\">\n      <extensionElements>\n        <modeler:initiator-can-complete xmlns:modeler=\"http://flowable.org/modeler\"><![CDATA[false]]></modeler:initiator-can-complete>\n      </extensionElements>\n    </userTask>\n    <sequenceFlow id=\"sid-9C744E8D-F727-429F-8CDC-F817C41645D1\" sourceRef=\"sid-972AC3BE-C69B-4076-84C6-87362F3DE9F0\" targetRef=\"sid-D3495ABF-E602-4758-85D4-9F74093447DD\"></sequenceFlow>\n    <endEvent id=\"sid-57C60AC7-ED92-4E55-8001-7E0507925C20\"></endEvent>\n    <sequenceFlow id=\"sid-1EF80CA3-BE86-4256-A5E2-538AD817E6DC\" sourceRef=\"sid-D3495ABF-E602-4758-85D4-9F74093447DD\" targetRef=\"sid-57C60AC7-ED92-4E55-8001-7E0507925C20\"></sequenceFlow>\n  </process>\n  <bpmndi:BPMNDiagram id=\"BPMNDiagram_DEMO_PROCESS_WITH_CHILD\">\n    <bpmndi:BPMNPlane bpmnElement=\"DEMO_PROCESS_WITH_CHILD\" id=\"BPMNPlane_DEMO_PROCESS_WITH_CHILD\">\n      <bpmndi:BPMNShape bpmnElement=\"startEvent1\" id=\"BPMNShape_startEvent1\">\n        <omgdc:Bounds height=\"30.0\" width=\"30.0\" x=\"330.0\" y=\"235.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-FCC03139-5216-4B7D-82C6-E20E4B49F9EE\" id=\"BPMNShape_sid-FCC03139-5216-4B7D-82C6-E20E4B49F9EE\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"405.0\" y=\"210.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-972AC3BE-C69B-4076-84C6-87362F3DE9F0\" id=\"BPMNShape_sid-972AC3BE-C69B-4076-84C6-87362F3DE9F0\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"560.0\" y=\"210.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-D3495ABF-E602-4758-85D4-9F74093447DD\" id=\"BPMNShape_sid-D3495ABF-E602-4758-85D4-9F74093447DD\">\n        <omgdc:Bounds height=\"80.0\" width=\"100.0\" x=\"720.0\" y=\"210.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNShape bpmnElement=\"sid-57C60AC7-ED92-4E55-8001-7E0507925C20\" id=\"BPMNShape_sid-57C60AC7-ED92-4E55-8001-7E0507925C20\">\n        <omgdc:Bounds height=\"28.0\" width=\"28.0\" x=\"865.0\" y=\"236.0\"></omgdc:Bounds>\n      </bpmndi:BPMNShape>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-B40A6A16-4A73-40B5-B838-63D0A4CBEAD3\" id=\"BPMNEdge_sid-B40A6A16-4A73-40B5-B838-63D0A4CBEAD3\">\n        <omgdi:waypoint x=\"359.9499984899576\" y=\"250.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"405.0\" y=\"250.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-9C744E8D-F727-429F-8CDC-F817C41645D1\" id=\"BPMNEdge_sid-9C744E8D-F727-429F-8CDC-F817C41645D1\">\n        <omgdi:waypoint x=\"659.9499999998419\" y=\"250.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"719.9999999999518\" y=\"250.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-1EF80CA3-BE86-4256-A5E2-538AD817E6DC\" id=\"BPMNEdge_sid-1EF80CA3-BE86-4256-A5E2-538AD817E6DC\">\n        <omgdi:waypoint x=\"819.949999999996\" y=\"250.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"865.0\" y=\"250.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n      <bpmndi:BPMNEdge bpmnElement=\"sid-692C6DD2-B500-4CC5-A566-FC42B3852A3C\" id=\"BPMNEdge_sid-692C6DD2-B500-4CC5-A566-FC42B3852A3C\">\n        <omgdi:waypoint x=\"504.949999999976\" y=\"250.0\"></omgdi:waypoint>\n        <omgdi:waypoint x=\"560.0\" y=\"250.0\"></omgdi:waypoint>\n      </bpmndi:BPMNEdge>\n    </bpmndi:BPMNPlane>\n  </bpmndi:BPMNDiagram>\n</definitions>\n```\n\n## 工程配置示例\n\n#### 依赖\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n        <version>2.0.8.RELEASE</version>\n    </dependency>\n    <dependency>\n        <groupId>org.flowable</groupId>\n        <artifactId>flowable-spring-boot-starter-process</artifactId>\n        <version>6.4.1</version>\n        <exclusions>\n            <exclusion>\n                <groupId>org.flowable</groupId>\n                <artifactId>flowable-spring-security</artifactId>\n            </exclusion>\n        </exclusions>\n    </dependency>\n    <dependency>\n        <groupId>mysql</groupId>\n        <artifactId>mysql-connector-java</artifactId>\n        <version>8.0.28</version>\n    </dependency>\n</dependencies>\n```\n\n#### 配置\n```properties\nspring.datasource.driver-class-name=\nspring.datasource.url=\nspring.datasource.username=\nspring.datasource.password=\n```\n\n## 流程代码示例\n\n#### 部署流程\n```java\n@PostMapping(\"/deploy\")\npublic String deploy() throws IOException {\n    // 部署流程\n    String name = \"DEMO_PROCESS_WITH_CHILD.bpmn20.xml\";\n    String bpmnStr = IoUtil.readFileAsString(name);// 这里也可以让前端直接传字符串过来\n    Deployment deployment = repositoryService.createDeployment().name(name).category(\"demo\").tenantId(\"demo\")\n            .addString(name, bpmnStr).deploy();\n    // 获取部署流程后自动创建的流程定义\n    ProcessDefinition process = repositoryService.createProcessDefinitionQuery().deploymentId(deployment.getId())\n            .singleResult();\n    return process.getId();\n}\n```\n\n#### 启动流程\n```java\n@PostMapping(\"/start\")\npublic String start(@RequestParam(\"processDefinitionId\") String processDefinitionId) throws IOException {\n    // 为会签节点添加处理人\n    Map<String, Object> variables = new HashMap<String, Object>();\n    variables.put(\"assigneeList\", Arrays.asList(\"user1-1\", \"user1-2\"));\n    // 启动流程\n    ProcessInstance processInstance = runtimeService.startProcessInstanceById(processDefinitionId, variables);\n    return processInstance.getId();\n}\n```\n\n#### 完成任务\n```java\n@PostMapping(\"/complete\")\npublic void complete(@RequestParam(\"taskId\") String taskId) throws IOException {\n    // 添加评论，必须在完成任务之前，一个任务可以添加多个评论。动态创建的任务节点不能添加评论，因为评论需要关联流程实例，而动态创建的任务节点不会关联任务的流程实例\n    taskService.addComment(taskId, null, \"DemoType\", \"DemoMessage\");\n    // 完成任务\n    taskService.complete(taskId);\n}\n```\n\n#### 委托任务\n```java\n@PostMapping(\"/delegate\")\npublic void delegate(@RequestParam(\"taskId\") String taskId, @RequestParam(\"userId\") String userId)\n        throws IOException {\n    // 委托任务\n    taskService.delegateTask(taskId, userId);\n}\n```\n\n#### 处理任务\n```java\n@PostMapping(\"/resolve\")\npublic void resolve(@RequestParam(\"taskId\") String taskId) throws IOException {\n    // 处理任务。当任务是委托状态时，才调用。处理任务之后，任务会回到委托前的人的手上，然后再调用完成任务，任务才会结束\n    taskService.resolveTask(taskId);\n}\n```\n\n#### 加签\n```java\n@PostMapping(\"/addAssignee\")\npublic void addAssignee(@RequestParam(\"taskId\") String taskId) throws IOException {\n    Task task = taskService.createTaskQuery().taskId(taskId).singleResult();\n    String processInstanceId = task.getProcessInstanceId();\n    String activityId = task.getTaskDefinitionKey();\n    // 加签\n    List<String> users = Arrays.asList(\"user3-1\", \"user3-2\");\n    for (String user : users) {\n        Map<String, Object> variables = new HashMap<String, Object>();\n        variables.put(\"assignee\", user);\n        runtimeService.addMultiInstanceExecution(activityId, processInstanceId, variables);\n    }\n}\n```\n\n#### 减签\n```java\n@PostMapping(\"/deleteAssignee\")\npublic void deleteAssignee(@RequestParam(\"executionId\") String executionId) throws IOException {\n    // 减签。建议在前端查询已存在的待办人时返回executionId\n    runtimeService.deleteMultiInstanceExecution(executionId, true);\n}\n```\n\n#### 挂起\n```java\n@PostMapping(\"/suspend\")\npublic void suspend(@RequestParam(\"processInstanceId\") String processInstanceId) throws IOException {\n    // 挂起\n    runtimeService.suspendProcessInstanceById(processInstanceId);\n}\n```\n\n#### 激活\n```java\n@PostMapping(\"/activate\")\npublic void activate(@RequestParam(\"processInstanceId\") String processInstanceId) throws IOException {\n    // 激活\n    runtimeService.activateProcessInstanceById(processInstanceId);\n}\n```\n\n#### 回退到上个节点\n```java\n@PostMapping(\"/back\")\npublic void back(@RequestParam(\"taskId\") String taskId) throws IOException {\n    // 获取任务对象\n    Task task = taskService.createTaskQuery().taskId(taskId).singleResult();\n    // 获取流程实例对象\n    String processInstanceId = task.getProcessInstanceId();\n    // 获取当前任务的节点ID\n    String curActId = task.getTaskDefinitionKey();\n    // 获取bpmn模型对象\n    BpmnModel bpmnModel = repositoryService.getBpmnModel(task.getProcessDefinitionId());\n    // 获取当前流程节点对象\n    FlowNode flowNode = (FlowNode) bpmnModel.getFlowElement(curActId);\n    // 获取当前流程节点的输入连线\n    List<SequenceFlow> incomingFlows = flowNode.getIncomingFlows();\n    // 获取当前节点的上一个节点\n    String prevActId = incomingFlows.get(0).getSourceRef();\n    // 回退到上一个节点\n    runtimeService.createChangeActivityStateBuilder().processInstanceId(processInstanceId).moveActivityIdTo(curActId, prevActId).changeState();\n}\n```\n\n#### 驳回到流程定义中的第一个节点\n```java\n@PostMapping(\"/reject\")\npublic void reject(@RequestParam(\"taskId\") String taskId) throws IOException {\n    // 获取任务对象\n    Task task = taskService.createTaskQuery().taskId(taskId).singleResult();\n    // 获取当前任务的节点ID\n    String curActId = task.getTaskDefinitionKey();\n    // 获取bpmn模型对象\n    BpmnModel bpmnModel = repositoryService.getBpmnModel(task.getProcessDefinitionId());\n    // 获取bpmn模型中的流程定义集合\n    List<Process> processes = bpmnModel.getProcesses();\n    // 当前测试的bpmn模型对象中只会存在一个流程定义\n    Process process = processes.get(0);\n    // 获取流程定义中的所有流程元素（乱序），包括开始节点、连线、任务节点和结束节点，\n    Collection<FlowElement> flowElements = process.getFlowElements();\n    // 获取开始事件节点\n    StartEvent startEvent = (StartEvent) flowElements.stream().filter(flowElement -> flowElement instanceof StartEvent).findFirst().get();\n    // 获取第一个节点ID\n    String firstActId = startEvent.getOutgoingFlows().get(0).getTargetRef();\n    // 驳回到流程定义中的第一个节点\n    runtimeService.createChangeActivityStateBuilder().processInstanceId(task.getProcessInstanceId()).moveActivityIdTo(curActId, firstActId).changeState();\n}\n```\n\n#### 转办任务\n```java\n@PostMapping(\"/turnTo\")\npublic void turnTo(@RequestParam(\"taskId\") String taskId) throws IOException {\n    taskService.setAssignee(taskId, \"user2-1\");\n}\n```\n\n#### 终止流程\n```java\n@PostMapping(\"/terminate\")\npublic void terminate(@RequestParam(\"processInstanceId\") String processInstanceId) throws IOException {\n    runtimeService.deleteProcessInstance(processInstanceId, \"system auto delete\");\n}\n```\n\n#### 获取流程定义中的所有节点\n```java\n@GetMapping(\"/acts\")\npublic List<String> getActs(@RequestParam(\"processDefinitionId\") String processDefinitionId) throws IOException {\n    // 获取bpmn模型对象\n    BpmnModel bpmnModel = repositoryService.getBpmnModel(processDefinitionId);\n    // 获取bpmn模型中的流程定义集合\n    List<Process> processes = bpmnModel.getProcesses();\n    // 当前测试的bpmn模型对象中只会存在一个流程定义\n    Process process = processes.get(0);\n    // 获取流程定义中的所有流程元素（乱序），包括开始节点、连线、任务节点和结束节点，\n    Collection<FlowElement> flowElements = process.getFlowElements();\n    // 获取所有用户任务的节点ID\n    return flowElements.stream().filter(flowElement -> flowElement instanceof UserTask).map(flowElement -> flowElement.getId()).collect(Collectors.toList());\n}\n```\n\n#### 自由流\n```java\n@PostMapping(\"/freeFlow\")\npublic void freeFlow(@RequestParam(\"processInstanceId\") String processInstanceId,\n                        @RequestParam(\"sourceActId\") String sourceActId,\n                        @RequestParam(\"targetActId\") String targetActId) throws IOException {\n    runtimeService.createChangeActivityStateBuilder().processInstanceId(processInstanceId).moveActivityIdTo(sourceActId, targetActId).changeState();\n}\n```\n\n#### 动态创建任务节点\n```java\n@PostMapping(\"/newTask\")\npublic void newTask(@RequestParam(\"taskId\") String taskId) throws IOException {\n    // 创建任务节点，不跟任何流程实例关联\n    Task newTask1 = taskService.newTask();\n    newTask1.setAssignee(\"user5-1\");\n    Task newTask2 = taskService.newTask();\n    newTask2.setAssignee(\"user5-2\");\n    // 如果这些动态创建的任务节点都完成后需要回到源节点，则需要将源节点的ID设置为其父任务ID\n    newTask1.setParentTaskId(taskId);\n    newTask2.setParentTaskId(taskId);\n    // 持久化任务节点\n    taskService.saveTask(newTask1);\n    taskService.saveTask(newTask2);\n}\n```\n\n#### 获取子任务数量\n```java\n@GetMapping(\"/subTaskCount\")\npublic int getSubTaskCount(@RequestParam(\"taskId\") String taskId) throws IOException {\n    return taskService.getSubTasks(taskId).size();\n}\n```\n\n#### 获取待办任务\n```java\n@GetMapping(\"/todoList\")\npublic List<String> getTodoList(@RequestParam(\"userId\") String userId) throws IOException {\n    return taskService.createTaskQuery().taskAssignee(userId).list().stream().map(task -> task.getId())\n            .collect(Collectors.toList());\n}\n```\n\n#### 获取已办任务\n```java\n@GetMapping(\"/doneList\")\npublic List<String> getDoneList(@RequestParam(\"userId\") String userId) throws IOException {\n    return historyService.createHistoricTaskInstanceQuery().taskAssignee(userId).finished().list().stream().map(task -> task.getId())\n            .collect(Collectors.toList());\n}\n```\n\n## 事件监听器示例\n\n#### 实现自定义事件监听器\n```java\nimport org.flowable.common.engine.api.delegate.event.FlowableEngineEventType;\nimport org.flowable.common.engine.api.delegate.event.FlowableEvent;\nimport org.flowable.common.engine.api.delegate.event.FlowableEventListener;\nimport org.flowable.engine.delegate.event.impl.FlowableEntityEventImpl;\nimport org.flowable.task.service.impl.persistence.entity.TaskEntityImpl;\n\n/*\n * 全局的事件监听器\n */\npublic class DemoEventListener implements FlowableEventListener {\n\n\t@Override\n\tpublic void onEvent(FlowableEvent event) {\n        // 判断事件类型为任务完成事件\n\t\tif (event.getType().equals(FlowableEngineEventType.TASK_COMPLETED)) {\n\t\t\tFlowableEntityEventImpl flowableEntityEvent = (FlowableEntityEventImpl) event;\n\t\t\tTaskEntityImpl task = (TaskEntityImpl) flowableEntityEvent.getEntity();\n\t\t\tString id = task.getId();\n\t\t\tSystem.out.println(id);\n\t\t}\n\t}\n\n\t@Override\n\tpublic boolean isFailOnException() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic boolean isFireOnTransactionLifecycleEvent() {\n\t\treturn false;\n\t}\n\n\t@Override\n\tpublic String getOnTransaction() {\n\t\treturn null;\n\t}\n\n}\n```\n\n#### 将自定义事件监听器添加到 Flowable 事件监听器集合中\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.flowable.common.engine.api.delegate.event.FlowableEventListener;\nimport org.flowable.spring.SpringProcessEngineConfiguration;\nimport org.flowable.spring.boot.EngineConfigurationConfigurer;\n\npublic class DemoEngineConfigurationConfigurer implements EngineConfigurationConfigurer<SpringProcessEngineConfiguration> {\n\n\tpublic void configure(SpringProcessEngineConfiguration processEngineConfiguration) {\n\t\tList<FlowableEventListener> eventListeners = processEngineConfiguration.getEventListeners();\n\t\tif (eventListeners == null) {\n\t\t\teventListeners = new ArrayList<FlowableEventListener>();\n\t\t}\n\t\teventListeners.add(new DemoEventListener());\n\t\tprocessEngineConfiguration.setEventListeners(eventListeners);\n\t}\n\n}\n```\n\n#### 自动配置类\n```java\nimport org.flowable.spring.SpringProcessEngineConfiguration;\nimport org.flowable.spring.boot.EngineConfigurationConfigurer;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class DemoConfig {\n\n\t@Bean\n\tpublic EngineConfigurationConfigurer<SpringProcessEngineConfiguration> engineConfigurationConfigurer() {\n\t\treturn new DemoEngineConfigurationConfigurer();\n\t}\n\n}\n```\n\n#### 将自动配置类添加到 META-INF/spring.factories 中以实现自动配置\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=\\\n  demo.flowable.DemoConfig\n```\n", "title": "【流程引擎-Flowable】Flowable使用示例"}
}
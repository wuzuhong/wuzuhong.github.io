function getBlog(){
	return blog = {"content": "# 【设计模式】模板方法模式\n定义一个操作中的算法的骨架，并将一些步骤延迟到子类中，使得子类可以在不改变一个算法的结构即可重新实现该算法的某些特定步骤。\n\nSpring 中的动态数据源 AbstractRoutingDataSource 就使用了模板方法模式，其将 determineCurrentLookupKey 这个方法进行了抽象化并交由子类来实现。\n\n## 示例\n```java\n// 抽象模板类\npublic abstract class AbstractTemplate {\n    public void done() {\n        operation1();\n        operation2();\n        operation3();\n    }\n\n    public void operation1() {\n        System.out.println(\"步骤 1\");\n    }\n\n    // 步骤 2 交由子类来实现\n    public abstract void operation2();\n    \n    public void operation3() {\n        System.out.println(\"步骤 3\");\n    }\n}\n\n\n// 具体模板类\npublic class ConcreteTemplate extends AbstractTemplate {\n    @Override\n    public void operation2() {\n        System.out.println(\"步骤 2\");\n    }\n}\n\n\n// 测试代码\npublic class Test {\n\tpublic static void main(String[] args) {\n\t\tAbstractTemplate template = new ConcreteTemplate();\n\t\ttemplate.done();\n\t}\n}\n// 以上测试代码输出：\n// 步骤 1\n// 步骤 2\n// 步骤 3\n```\n\n## 模板方法模式的应用\n\n#### 优点\n* 封装不变部分，扩展可变部分\n* 提取公共部分代码，便于维护\n* 行为由父类控制，子类负责实现\n\n#### 缺点\n* 每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大\n\n#### 使用场景\n* 有多个子类共有的方法，且逻辑相同\n* 重要的、复杂的方法，可以考虑作为模板方法\n* 重构时，模板方法模式是一个经常使用到的模式，把相同的代码抽取到父类中，通过钩子函数约束其行为", "title": "【设计模式】模板方法模式"}
}
function getBlog(){
	return blog = {"content": "# 【微服务—SpringCloudAlibaba】微服务架构\n## 概述\n* 微服务架构是一种架构模式，或者说是一种架构风格，它提倡将原始的单体应用拆分成一组小的服务（通常是按业务来拆分），每个服务运行在其独立的进程中，彻底的去耦合，专业的服务做专业的事情。\n* 服务之间互相协调、互相配合，为用户提供最终价值。\n* 服务之间采用轻量级的通信机制互相沟通，通常是基于RESTfulAPI。\n* 每个服务都围绕具体业务进行构建，并且能够独立地部署到生产环境。\n* 应尽量避免统一的、集中式的管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言、工具对其进行构建，可以有一个非常轻量级的集中管理来协调这些服务，可以使用不同的语言来编写服务，也可以使用不同的数据存储。\n\n## 技术要点\n* 配置管理\n* 服务发现和负载均衡\n* 弹性和容错\n* API管理\n* 服务安全\n* 日志管理\n* Metrics监控\n* 分布式调用链追踪\n* 调度和发布\n* 自动伸缩和自愈\n\n一般微服务会涉及到的各种组件：\n![](./images/microservice.jpeg)\n\n## 优缺点\n### 优点\n* 每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或需求\n* 开发简单、开发效率提高，一个服务就是专一的只干一件事\n* 微服务能够被小团队单独开发，这个小团队可以是2到5人组成\n* 微服务是松耦合的，是具有功能意义的服务，无论是开发阶段或是部署阶段都是独立的\n* 微服务能使用不同的语言开发\n* 易于集成第三方库，融合最新的技术（微服务能以灵活的方式集成自动部署）\n* 微服务易于被开发人员理解、修改和维护，这样小团队能够更关注自己的工作\n* 每个微服务都可以有自己的数据库，也可以用统一的数据库\n\n### 缺点\n* 开发人员要处理分布式系统的复杂性，比如分布式事务\n* 随着服务的增加，运维的压力也在增大\n* 服务间通信成本加大\n* 性能监控难度加大", "title": "【微服务—SpringCloudAlibaba】微服务架构"}
}
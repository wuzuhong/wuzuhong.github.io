function getBlog(){
	return blog = {"content": "# 【jvm详解】执行引擎\nJVM执行引擎实例对应了属于用户运行程序的线程，它是线程级别的。\n\n执行引擎负责具体的代码调用及执行过程:\n1. 输入字节码文件\n2. 解析并处理字节码\n3. 输出执行结果。\n\n物理机的执行引擎是由硬件实现的，和物理机的执行过程不同的是虚拟机的执行引擎由软件实现的。\n\n类装载器装载负责装载编译后的字节码，并加载到运行时数据区，然后执行引擎执行会执行这些字节码。\n\n执行引擎以指令为单位读取字节码，它就像一个CPU一样，一条一条地执行机器指令。执行引擎首先取得一个操作码，然后根据操作数来执行任务，完成后就继续执行下一条操作码。\n\n不过Java字节码是用一种人类可以读懂的语言编写的，而不是用机器可以直接执行的语言，因此，执行引擎必须把字节码转换成可以直接被JVM执行的语言，字节码可以通过以下两种方式转换成合适的语言：\n* 解释器：一条一条地读取，解释并且执行字节码指令。因为它一条一条地解释和执行指令，所以它可以很快地解释字节码，但是执行起来会比较慢，这是解释执行的语言的一个缺点，字节码这种“语言”基本来说是解释执行的。\n* 即时编译器：即时编译器被引入用来弥补解释器的缺点。执行引擎首先按照解释执行的方式来执行，然后在合适的时候，即时编译器把整段字节码编译成本地代码，然后，执行引擎就没有必要再去解释执行方法了，它可以直接通过本地代码去执行它，执行本地代码比一条一条进行解释执行的速度快很多，因为本地代码是保存在缓存里的。", "title": "【jvm详解】执行引擎"}
}
function getBlog(){
	return blog = {"content": "# 【密码技术】CA证书与SSL证书\n\n## CA证书\n* CA证书 = 申请者公钥 + 申请者与颁发者信息 + 有效时间 + 签名。\n* CA证书包括SSL证书、代码签名证书和电子邮件证书等等。\n\n#### 证书签发过程\n* 首先，`服务端`向`CA认证中心`提交申请，需要提交的数据包括`服务端`的公钥和`服务端`的基本信息。\n* 然后，`CA认证中心`通过线上或线下的方式来验证`服务端`的基本信息是否合法。\n* 然后，验证通过后，`CA认证中心`会默认生成一个时间戳来作为有效时间，将有效时间以及`CA认证中心`的基本信息，将`服务端`的公钥+`服务端`的基本信息+`CA认证中心`的基本信息+有效时间作为明文，并对明文进行散列化（哈希算法）得到明文的摘要，最后使用`CA认证中心`的私钥对明文的摘要进行加密，得到签名。\n* 最后，将`服务端`的公钥+`服务端`的基本信息+`CA认证中心`的基本信息+有效时间+签名的数据打包成证书文件，发送给`服务端`。\n\n#### 证书认证过程\n* 首先，`客户端`向`服务端`发起请求，`服务端`将证书返回给`客户端`。\n* 然后，`客户端`从本地获取对应证书的`CA认证中心`的根证书。（达到`客户端`信任`CA认证中心`的效果）\n* 然后，使用`CA认证中心`的根证书中的公钥对证书的签名进行验签。验签的具体做法是对证书的签名进行解密，并将证书的明文进行散列化（哈希算法）得到明文的摘要，然后校验解密的结果与摘要是否一致。（达到`客户端`信任`服务端`的效果）\n* 然后，校验成功后，`客户端`产生随机值，并使用证书中的公钥对随机数进行加密后发送给`服务端`。\n* 然后，`服务端`通过使用自己的私钥解密得到这个随机值。（达到`服务端`信任`客户端`的效果）\n* 最后，`客户端`和`服务端`开始使用这个随机值进行对称加密来实现数据交互。（非对称加密的消耗的计算以及时间远比对称加密消耗的要大）\n\n## SSL证书\nSSL证书是CA证书中的一种，常用于加密HTTP协议，也就是HTTPS。[证书认证过程](####证书认证过程)其实就是HTTPS的一次握手。\n", "title": "【密码技术】CA证书与SSL证书"}
}
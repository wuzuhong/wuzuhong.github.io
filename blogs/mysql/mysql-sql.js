function getBlog(){
	return blog = {"content": "# 【mysql】常用sql语句\n## 数据库表\n* 创建数据库，并指定字符集为 utf8\n```\nCREATE DATABASE IF NOT EXISTS aa DEFAULT CHARACTER SET='utf8';\n```\n\n* 删除数据库\n```\nDROP DATABASE IF EXISTS aa;\n```\n\n* 显示所有数据库\n```\nSHOW DATABASES;\n```\n\n* 使用指定数据库，从此所有操作都将只对这个数据库产生影响\n```\nUSE aa;\n```\n\n* 创建数据库表\n```\nCREATE TABLE IF NOT EXISTS book (\n  id_ INT(8) NOT NULL AUTO_INCREMENT,\n  name_ VARCHAR(32) NOT NULL,\n  PRIMARY KEY(id_)\n)\n```\n\n* 删除数据库表\n```\nDROP TABLE book;\n```\n\n* 查看表结构的详细信息\n```\nDESC book;\n```\n\n* 查看创建数据库表时所用的语句\n```\nSHOW CREATE TABLE book;\n```\n\n* 修改数据库表的名字\n```\nALTER TABLE book RENAME tb_book;\n```\n\n* 修改数据库表中某一列的名称和类型\n```\nALTER TABLE book CHANGE name_ name2_ VARCHAR(64);\n```\n\n* 在数据库表的第一列添加一列\n```\nALTER TABLE book ADD desc_ VARCHAR(255) FIRST;\n```\n\n* 在数据库表的某一列后面添加一列\n```\nALTER TABLE book ADD desc_ VARCHAR(255) AFTER name_;\n```\n\n* 删除数据库中某一列\n```\nALTER TABLE book DROP desc_; \n```\n\n## 新增\n* 为所有列新增数据\n```\nINSERT INTO book VALUES(NULL,'haha');\n```\n\n* 只为某些列上新增数据，其他列自动为NULL\n```\nINSERT INTO book(desc_) VALUES('haha_desc');\n```\n\n## 修改\n```\nUPDATE book SET name_='haha11' WHERE id_=1;\n```\n\n## 删除\n```\nDELETE FROM book WHERE id_=5;\n```\n\n## 查询\n* 根据是否为NULL来查询\n```\nSELECT id_ FROM t_student WHERE sex_ IS NULL;\nSELECT id_ FROM t_student WHERE sex_ IS NOT NULL;\n```\n\n* 根据是否存在于某个数据集合中来查询\n```\nSELECT id_ FROM t_student WHERE age_ IN (21,23);\nSELECT id_ FROM t_student WHERE age_ NOT IN (21,23);\n```\n\n* 根据是否在某个范围之内来查询\n```\nSELECT id_ FROM t_student WHERE age_ BETWEEN 21 AND 24;\nSELECT id_ FROM t_student WHERE age_ NOT BETWEEN 21 AND 24;\n```\n\n* 模糊查询\n```\nSELECT id_ FROM t_student WHERE name_ LIKE '张三%';\nSELECT id_ FROM t_student WHERE name_ LIKE '%张三';\nSELECT id_ FROM t_student WHERE name_ LIKE '%张三%';\n```\n\n* 多条件查询\n```\nSELECT id_ FROM t_student WHERE grade_name='一年级' AND age_=23\nSELECT id_ FROM t_student WHERE grade_name='一年级' OR age_=23\n```\n\n* 排序\n```\nSELECT id_ FROM t_student ORDER BY age_ ASC;\nSELECT id_ FROM t_student ORDER BY age_ DESC;\n```\n\n* 分组\n```\nSELECT id_ FROM t_student GROUP BY grade_name;\n```\n\n* 将分组后的每一组中所有的值连接起来，返回一个字符串结果列\n```\nSELECT grade_name,GROUP_CONCAT(name_) FROM t_student GROUP BY grade_name;\n```\n\n* 将分组后的每一组中值的数量进行计数，返回一个数量结果列\n```\nSELECT grade_name,COUNT(age_) FROM t_student GROUP BY grade_name;\n```\n\n* 将分组后的数据进行条件筛选\n```\nSELECT grade_name,COUNT(age_) count_num FROM t_student GROUP BY grade_name HAVING count_num>3;\n```\n\n* 先将数据进行分组，然后在分组的基础上进行某些字段的统计，会在最后一行返回统计结果，只对count、sum等一些统计类数学函数起作用\n```\nSELECT grade_name,COUNT(age_) FROM t_student GROUP BY grade_name WITH ROLLUP;\n```\n\n* 统计类查询函数COUNT、SUM、AVG、MAX、MIN\n\n* 左连接，where条件只影响右表，也就是tb2，这里会返回tb1的所有数据和tb2中满足where条件的数据\n```\nselect * from tb1 left join tb2 on tb1.id_ = tb2.id_\n```\n\n* 右连接，where条件只影响左表，也就是tb1，这里会返回tb2的所有数据和tb1中满足where条件的数据。\n```\nselect * from tb1 right join tb2 on tb1.id_ = tb2.id_\n```\n\n* 内连接\n```\n# 内连接\nselect * from tb1 inner join tb2 on tb1.id_ = tb2.id_\n# 内连接和以下sql的功能相同\nselect * from tb1,tb2 where tb1.id_=tb2.id_\n```\n\n* 子查询，就是一个SELECT语句的查询结果能够作为另一个语句的输入值，不但能够出现在Where子句中，也能够出现在from子句中，作为一个临时表使用\n```\nSELECT * FROM t_book WHERE book_type_id IN (SELECT id_ FROM t_booktype);\n```\n\n* ANY 和 ALL\n```\nSELECT * FROM t_book WHERE price_ >= ANY (SELECT price_ FROM t_pricelevel);\nSELECT * FROM t_book WHERE price_ >= ALL (SELECT price_ FROM t_pricelevel);\n```\n\n* 分页，注意：order by要放在limit之前\n```\nSELECT * FROM t_student ORDER BY age_ ASC LIMIT 0, 5;\n```\n\n* 日期选择\n```\n# 查询hire_date所在月份的最后一天入职的员工信息\nSELECT * FROM employees WHERE hire_date = LAST_DAY(hire_date)\n# 查询hire_date所在月份倒数第二天入职的员工信息\nSELECT * FROM employees WHERE hire_date = LAST_DAY(hire_date)-1\n```\n\n* 字符串处理\n```\nSELECT name_,CHAR_LENGTH(name_),UPPER(name_),LOWER(name_) FROM t_student;\n```\n\n* md5加密\n```\nINSERT INTO t_student VALUES(NULL,'2013-1-1','a',1,MD5('123456'));\n```\n\n* 数学运算\n```\n# ABS()用于求绝对值\nSELECT num_, ABS(num_) FROM t_student;\n# SQRT()用于求平方根，MOD()用于求余\nSELECT SQRT(4),MOD(9,4) FROM t_student;\n```", "title": "【mysql】常用sql语句"}
}
function getBlog(){
	return blog = {"content": "# 【java并发编程】实现简单的线程池\n```java\nimport java.util.concurrent.LinkedBlockingQueue;\nimport java.util.concurrent.TimeUnit;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class CustomThreadPool {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(CustomThreadPool.class);\n\n\tprivate final Worker[] workers;// 线程池\n\tprivate final LinkedBlockingQueue<Runnable> tasks = new LinkedBlockingQueue<>();// 任务队列\n\tprivate boolean isShutdown = false;// 是否处于终止状态\n\n\t/**\n\t * 初始化\n\t * \n\t * @param poolSize 线程池大小\n\t */\n\tpublic CustomThreadPool(int poolSize) {\n\t\t// 初始化线程池\n\t\tworkers = new Worker[poolSize];\n\t\tfor (int i = 0; i < poolSize; i++) {\n\t\t\tcreateWorker(i);\n\t\t}\n\t}\n\n\t/**\n\t * 创建工作线程\n\t * \n\t * @param index\n\t */\n\tprivate void createWorker(int index) {\n\t\tworkers[index] = new Worker();\n\t\tworkers[index].start();\n\t}\n\n\t/**\n\t * 将任务添加到任务队列\n\t * \n\t * @param task\n\t */\n\tpublic void execute(Runnable task) {\n\t\tsynchronized (this) {\n\t\t\ttasks.add(task);\n\t\t}\n\t}\n\n\tprivate class Worker extends Thread {\n\n\t\t/**\n\t\t * 当前工作线程所执行的任务\n\t\t */\n\t\tprivate Runnable task;\n\n\t\t@Override\n\t\tpublic void run() {\n\t\t\t// 如果当前线程池没有终止，则继续等待\n\t\t\twhile (!isShutdown) {\n\t\t\t\tsynchronized (this) {\n\t\t\t\t\t// 如果任务队列为空，则继续等待\n\t\t\t\t\tif (tasks.isEmpty()) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// 从任务队列的顶部去除并移除一个任务\n\t\t\t\t\ttask = tasks.poll();\n\t\t\t\t}\n\t\t\t\t// run 方法是同步执行的\n\t\t\t\ttask.run();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * 终止当前线程池\n\t */\n\tpublic void shutdown() {\n\t\tLOGGER.info(\"线程池关闭中......\");\n\t\tisShutdown = true;\n\t}\n\n\t/**\n\t * 获取线程池是否处于终止状态\n\t * \n\t * @return\n\t */\n\tpublic boolean isShutdown() {\n\t\treturn isShutdown;\n\t}\n\n\t/**\n\t * 测试代码\n\t * \n\t * @param args\n\t * @throws InterruptedException\n\t */\n\tpublic static void main(String[] args) throws InterruptedException {\n\t\t// 创建拥有两个线程的线程池\n\t\tCustomThreadPool customThreadPool = new CustomThreadPool(2);\n\t\tLOGGER.info(\"线程开始创建\");\n\t\tcustomThreadPool.execute(() -> {\n\t\t\tLOGGER.info(\"第1个线程开始执行\");\n\t\t\ttry {\n\t\t\t\tTimeUnit.SECONDS.sleep(2);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tLOGGER.info(\"第1个线程执行完成\");\n\t\t});\n\t\tLOGGER.info(\"第1个线程创建完成\");\n\t\tcustomThreadPool.execute(() -> {\n\t\t\tLOGGER.info(\"第2个线程开始执行\");\n\t\t\ttry {\n\t\t\t\tTimeUnit.SECONDS.sleep(2);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tLOGGER.info(\"第2个线程执行完成\");\n\t\t});\n\t\tLOGGER.info(\"第2个线程创建完成\");\n\t\tcustomThreadPool.execute(() -> {\n\t\t\tLOGGER.info(\"第3个线程开始执行\");\n\t\t\ttry {\n\t\t\t\tTimeUnit.SECONDS.sleep(2);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tLOGGER.info(\"第3个线程执行完成\");\n\t\t});\n\t\tLOGGER.info(\"第3个线程创建完成\");\n\t\tcustomThreadPool.execute(() -> {\n\t\t\tLOGGER.info(\"第4个线程开始执行\");\n\t\t\ttry {\n\t\t\t\tTimeUnit.SECONDS.sleep(2);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tLOGGER.info(\"第4个线程执行完成\");\n\t\t});\n\t\tLOGGER.info(\"第4个线程创建完成\");\n\t\tcustomThreadPool.execute(() -> {\n\t\t\tLOGGER.info(\"第5个线程开始执行\");\n\t\t\ttry {\n\t\t\t\tTimeUnit.SECONDS.sleep(2);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t\tLOGGER.info(\"第5个线程执行完成\");\n\t\t});\n\t\tLOGGER.info(\"第5个线程创建完成\");\n\t\t// 终止线程\n\t\tTimeUnit.SECONDS.sleep(12);\n\t\tcustomThreadPool.shutdown();\n\t}\n}\n```\n以上代码执行结果为：\n```log\n16:45:48.795 [main] INFO com.example.demo.CustomThreadPool - 线程开始创建\n16:45:48.883 [main] INFO com.example.demo.CustomThreadPool - 第1个线程创建完成\n16:45:48.883 [Thread-0] INFO com.example.demo.CustomThreadPool - 第1个线程开始执行\n16:45:48.883 [main] INFO com.example.demo.CustomThreadPool - 第2个线程创建完成\n16:45:48.884 [Thread-1] INFO com.example.demo.CustomThreadPool - 第2个线程开始执行\n16:45:48.884 [main] INFO com.example.demo.CustomThreadPool - 第3个线程创建完成\n16:45:48.884 [main] INFO com.example.demo.CustomThreadPool - 第4个线程创建完成\n16:45:48.885 [main] INFO com.example.demo.CustomThreadPool - 第5个线程创建完成\n16:45:50.883 [Thread-0] INFO com.example.demo.CustomThreadPool - 第1个线程执行完成\n16:45:50.883 [Thread-0] INFO com.example.demo.CustomThreadPool - 第3个线程开始执行\n16:45:50.884 [Thread-1] INFO com.example.demo.CustomThreadPool - 第2个线程执行完成\n16:45:50.884 [Thread-1] INFO com.example.demo.CustomThreadPool - 第4个线程开始执行\n16:45:52.884 [Thread-0] INFO com.example.demo.CustomThreadPool - 第3个线程执行完成\n16:45:52.884 [Thread-1] INFO com.example.demo.CustomThreadPool - 第4个线程执行完成\n16:45:52.885 [Thread-0] INFO com.example.demo.CustomThreadPool - 第5个线程开始执行\n16:45:54.886 [Thread-0] INFO com.example.demo.CustomThreadPool - 第5个线程执行完成\n16:46:00.886 [main] INFO com.example.demo.CustomThreadPool - 线程池关闭中......\n```", "title": "【java并发编程】实现简单的线程池"}
}
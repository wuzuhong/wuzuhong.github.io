function getBlog(){
	return blog = {"content": "# 【java并发编程】volatile 关键字\nvolatile 是一种轻量级的同步机制。相对于 synchronized 而言， volatile 不会引起线程的切换和调度，所以 volatile 更加轻量。\n\nvolatile 关键字有两个作用：\n1. 保证共享变量的可见性\n2. 防止指令重排序\n\n## 保证共享变量的可见性\n当一个线程修改一个共享变量时，另外一个线程能读到被修改后的值。其原理在于：Java内存模型中有主内存和本地内存之分，本地内存持有共享变量的一份副本，线程对共享变量的修改是先修改本地内存的副本，然后再回写到主内存中去。如何没有使用 volatile 关键字，线程A和线程B同时去修改一个共享变量C，假设线程A先对共享变量C做了修改，而此时线程B却没能及时感知到共享变量C已经发生了改变，紧接着B对本地过期的副本数据进行了修改，这造成了共享变量的不可见问题。而使用了 volatile 关键字修改的共享变量，当线程修改了共享变量之后，会立马刷新到主内存中，并且会使其他线程本地内存缓存了该地址的数据失效，这就保证了线程之间共享变量的可见性。\n\n## 防止指令重排序\n代码在实际执行过程中，并不全是按照编写的顺序进行执行的，在保证单线程执行结果不变的情况下，编译器或者CPU可能会对指令进行重排序，以提高程序的执行效率。但是在多线程的情况下，指令重排序可能会造成一些问题，最常见的就是双重校验锁单例模式中如果没有使用volatile关键字，则可能会出现其他线程获取了一个未初始化完成的对象。\n\n## volatile 和 synchronized 的区别和使用场景\n\n", "title": "【java并发编程】volatile 关键字"}
}
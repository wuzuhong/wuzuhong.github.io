function getBlog(){
	return blog = {"content": "# 【springboot】异常处理\n* DemoExceptionHandler.java\n```java\n@ControllerAdvice\npublic class DemoExceptionHandler {\n\t// 这里的 error 对应了templates目录下的error.ftl文件\n    public static final String DEFAULT_ERROR_VIEW = \"error\";\n\n    // 默认的异常处理。 Exception 及其子类都会进入到当前异常处理方法。\n\t// 注意：一个异常类只能存在一个方法上，例如：当前方法用了Exception后，这个类中的其他方法的异常类就必须换成其他自定义的。\n    @ExceptionHandler(value = Exception.class)\n    public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n        //这里必须使用ModelAndView，而不能使用ModelMap\n    \tModelAndView mav = new ModelAndView();\n        mav.addObject(\"exception\", e);\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(DEFAULT_ERROR_VIEW);\n        return mav;\n    }\n    \n    // 自定义的异常处理。 DemoPageException 及其子类都会进入到当前异常处理方法。\n    @ExceptionHandler(value = DemoPageException.class)\n    public ModelAndView customErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n    \tModelAndView mav = new ModelAndView();\n        mav.addObject(\"exception\", e);\n        mav.addObject(\"url\", req.getRequestURL());\n        mav.setViewName(DEFAULT_ERROR_VIEW);\n        return mav;\n    }\n    \n    // 返回json数据的异常处理。 DemoJsonException 及其子类都会进入到当前异常处理方法。\n    @ExceptionHandler(value = DemoJsonException.class)\n    public @ResponseBody DemoExceptionInfo jsonErrorHandler(HttpServletRequest req, Exception e) throws Exception {\n    \t// DemoExceptionInfo 为自定义的异常信息类\n    \tDemoExceptionInfo demoExceptionInfo=new DemoExceptionInfo();\n    \tdemoExceptionInfo.setCode(\"404\");\n    \tdemoExceptionInfo.setMessage(e.getMessage());\n    \tdemoExceptionInfo.setUrl(req.getRequestURL().toString());\n        return demoExceptionInfo;\n    }\n}\n```\n* DemoExceptionInfo.java\n```java\n// 异常信息类\npublic class DemoExceptionInfo {\n\t//异常代码\n\tpublic String code;\n\t//异常信息\n\tpublic String message;\n\t//异常地址\n\tpublic String url;\n\t//异常数据\n\tpublic String data;\n\t\n\t// getters and setters\n}\n```", "title": "【springboot】异常处理"}
}
function getBlog(){
	return blog = {"content": "# 【springboot】如何向 SpringBoot 中添加自定义的配置源\nSpringBoot配置信息的主要来源有以下三种：\n1. 系统环境变量\n2. JVM启动参数\n3. application.yaml配置文件\n\n对于不同位置的application.yaml配置文件的优先级也不同：\n1. file:config/application.yaml\n2. file:application.yaml\n3. classpath:config/application.yaml\n4. classpath:application.yaml\n\n以上三种配置源是按照优先级来排列的，它们都按照优先级的顺序保存在 PropertySources（具体来说是其实现类 MutablePropertySources ） 中。排的越前，优先级越高。\n\n这里的优先级说的是，优先级高的配置源中的配置信息能够覆盖优先级低的配置源中的配置信息。\n\n所以，如果想往SpringBoot中添加自定义的配置源，只需要往 PropertySources 中新增一个 PropertySource 即可，它里面有很多的新增接口。 PropertySource 有很多的实现类，如果配置源是 properties 文件或 xml 文件，建议使用 ResourcePropertySource ，如果配置源是 java 对象，建议使用 MapPropertySource 。\n\n现在已经知道如何实现了，但是又该在哪里写这些实现代码呢？这时就要阅读 PropertySourcesPlaceholderConfigurer 这个类的源码了，接下来将会以 spring-context-5.0.7.RELEASE 中的来阐述，在其 128 行的 postProcessBeanFactory 方法中就会对 PropertySources 进行初始化，我们的实现代码就可以加在这个地方，这里提供两种方法：\n* 通过在自己工程中新增一个 PropertySourcesPlaceholderConfigurer 类，这个类的包名和代码都先跟其源码保持一致，然后在源码的基础上再添加自己的实现代码即可。因为包名和类名都一致，所以会优先加载自己工程中的\n* 通过新增一个自定义类，继承 PropertySourcesPlaceholderConfigurer 类，并重写 postProcessBeanFactory 方法，重写的这个方法先和源码一致（注意，不是调用super方法，而是复制该方法的内容），然后在源码的基础上再添加自己的实现代码，如：`this.propertySources.addLast(new Properties())`，即可。\n\napollo 和 nacos 配置中心也往 SpringBoot 中添加了配置源。", "title": "【springboot】如何向 SpringBoot 中添加自定义的配置源"}
}
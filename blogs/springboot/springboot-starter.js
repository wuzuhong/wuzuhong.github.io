function getBlog(){
	return blog = {"content": "# 【springboot】starter启动器\n## 概述\nspringboot的starter（启动器）本质上就是一个maven依赖，它与maven依赖唯一区别就是在springboot启动时它的所有组件都能自动被加载，并且它还会提供一些默认配置，使得普通用户可以“开箱即用”。\n\n## 自定义starter\n### 创建一个用maven构建的springboot项目\n#### maven依赖\n```xml\n<parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>2.1.3.RELEASE</version>\n    <relativePath/> <!-- lookup parent from repository -->\n</parent>\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter</artifactId>\n</dependency>\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n    </plugins>\n</build>\n```\n#### 创建一个pojo用于接收全局配置文件中的信息\n```java\n//接收指定前缀的配置值\n@ConfigurationProperties(prefix = \"demostarter\")\npublic class DemoStarterProperteis {\n    private String msg;\n    public String setMsg(String msg) {\n        this.msg = msg;\n    }\n    public String getMsg() {\n        return this.msg;\n    }\n}\n```\n#### 创建一个service用于对外提供服务\n```java\npublic class DemoStarterService {\n    private String msg;\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n    public String getMsg() {\n        return this.msg;\n    }\n}\n```\n#### 创建一个自动配置类进行自动配置功能\n```java\n//表示这是一个配置类\n@Configuration\n//启动指定类的ConfigurationProperties功能，将配置文件中对应的值和DemoStarterProperteis类型绑定起来并把DemoStarterProperteis加入到ioc容器中，可以指定多个，以逗号分隔。                                             \n@EnableConfigurationProperties(value = DemoStarterProperteis.class)\n//以下三个注解都是Spring底层@Conditional注解（Spring注解版），只有满足所有指定的条件，整个配置类里面的配置才会生效； \n//当前注解用于判断当前应用是否是web应用，如果是，当前配置类生效。\n@ConditionalOnWebApplication(type = ConditionalOnWebApplication.Type.SERVLET)\n//当前注解用于判断当前项目有没有DemoStarterService这个类；如果有，当前配置类生效。\n@ConditionalOnClass(DemoStarterService.class)\n//当前注解用于判断配置文件中是否存在某个配置 demostarter.enabled，matchIfMissing=true表示如果不存在则默认设置为true，判断也是成立的；\n@ConditionalOnProperty(prefix = \"demostarter\", value = \"enabled\", matchIfMissing = true)\npublic class DemoAutoConfiguration {\n    // 已经和SpringBoot的配置文件映射了\n    private final DemoStarterProperteis demoStarterProperteis;\n    //给容器中添加一个组件，这个组件的某些值需要从properties中获取\n    @Bean\n    @ConditionalOnMissingBean(DemoStarterService.class) //判断容器没有这个组件\n    public DemoStarterService demoStarterService() {\n        DemoStarterService demoStarterService = new DemoStarterService();\n        demoStarterService.setMsg(demoStarterProperteis.getMsg());\n        return demoStarterService;\n    }\n}\n```\n#### 创建spring.factories文件\n在src/main/resources 文件夹下新建文件夹 META-INF，在新建的META-INF文件夹下新建spring.factories文件，并在该文件中配置自动配置类为我们之前编写的DemoAutoConfiguration类\n```\norg.springframework.boot.autoconfigure.EnableAutoConfiguration=com.demo.DemoAutoConfiguration\n```\n#### 在其他springboot项目中使用\n在其他项目的全局配置文件中定义demostarter.msg，然后再调用demoStarterService.getMsg()即可返回全局配置文件中demostarter.msg的值，和demoStarterService中的逻辑一致，并且demoStarterService是通过@Autowired注入的，而不是new出来的。并且在其他项目启动时可以看到控制台输出的内容中依赖的starter已经有我们自定义的starter了，说明已经启动了我们自定义的starter。", "title": "【springboot】starter启动器"}
}
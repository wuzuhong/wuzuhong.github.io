function getBlog(){
	return blog = {"content": "# 【springboot】配置类\nspringboot抛弃了以往xml文件的配置方式，而使用配置类来对我们的组件进行配置。\n配置类的一个简单示例：\n```java\n@Configuration  // 指明当前类是一个配置类\npublic class DemoConfig {\n  @Bean  // 相当于 xml 配置文件中的 <Bean>标签，<Bean>标签中的 id 就是当前方法的方法名\n  public DemoService demoService() {\n    return new DemoServiceImpl();\n  }\n}\n```\n\n注册WebMvc拦截器的配置类可以这样写：\n```\n@Configuration\npublic class WebMvcConfig {\n  @Override\n  public void addInterceptors(InterceptorRegistry registry) {\n    //注册拦截器。当注册了多个拦截器则会按照顺序执行拦截器\n    registry.addInterceptor(new InterceptorOne())  //注册拦截器 InterceptorOne\n        .addPathPatterns(\"/hello/**\");  //为拦截器 InterceptorOne 添加需要被拦截的地址，当需要拦截多种地址时可在此方法中传入一个集合\n    registry.addInterceptor(new InterceptorTwo())\n        .addPathPatterns(\"/hello/**\");\n    WebMvcConfigurer.super.addInterceptors(registry);\n  }\n}\n```\n\n当然也支持在`@Configuration`注解下面使用`@ImportResource`注解来加载xml文件配置。其支持通配符，例如：`@ImportResource(\"classpath*:aabb/*-ccdd.xml\")`。\n\n也支持自定义xml文件读取逻辑，只需要自定义一个`BeanDefinitionReader`的实现类，然后这样使用`@ImportResource(locations=\"classpath*:aabb/*-ccdd.xml\", reader=DemoXmlBeanDefinitionReader)`，最后实现这个`DemoXmlBeanDefinitionReader`类：\n```java\npublic class DemoXmlBeanDefinitionReader extends XmlBeanDefinitionReader {\n\tpublic DemoXmlBeanDefinitionReader(BeanDefinitionRegistry registry) {\n\t\tsuper(registry);\n    // 自定义逻辑\n\t}\n\t@Override\n\tpublic int loadBeanDefinitions(Resource resource) throws BeanDefinitionStoreException {\n\t\t// 自定义逻辑\n    // 入参 Resource 对象代表 xml 文件\n    // 返回值为当前 xml 文件中 bean 的数量，若不想让当前 xml 文件生效，则可以返回 0\n\t\treturn super.loadBeanDefinitions(resource);\n\t}\n}\n```", "title": "【springboot】配置类"}
}
function getBlog(){
	return blog = {"content": "# 【Redis-5.0】持久化\n虽然Redis是一个内存数据库，但它也提供了两种级别的持久化方式：\n* RDB持久化方式能够在指定的时间间隔中周期性的对数据进行快照存储。\n* AOF持久化方式会记录每次对服务器写的操作命令，当服务器重启的时候会重新执行这些命令来恢复原始的数据。\n\n## RDB的优点\n* RDB是一个非常紧凑的文件，它保存了某个时间点的数据集，非常适用于数据集的备份，比如可以在每个小时保存一下过去24小时内的数据，同时每天保存过去30天的数据，这样即使出了问题也可以根据需求恢复到不同版本的数据集。\n* RDB是一个紧凑的单一文件，很方便传送到另一个远端数据中心或者亚马逊的S3，非常适用于灾难恢复。\n* RDB在保存RDB文件时父进程唯一需要做的就是fork出一个子进程，接下来的工作全部由子进程来做，父进程不需要再做其他的IO操作，所以RDB持久化方式可以最大化redis的性能。\n* 与AOF相比，在恢复大的数据集的时候，RDB方式会更快一些。\n\n## RDB的缺点\n* 如果希望在redis意外中停止工作的情况下丢失的数据最少的话，那么RDB就不适合了。虽然可以配置不同的快照存储时间点，但是Redis要完整的保存整个数据集是一个比较繁重的工作，所以通常会选择每隔5分钟或者更久做一次完整的保存，万一Redis意外宕机，就可能会丢失几分钟的数据。\n* RDB需要经常fork子进程来保存数据集到硬盘上，当数据集比较大的时候，fork的过程是非常耗时的，可能会导致Redis在一些毫秒级内不能响应客户端的请求。如果数据集巨大并且CPU性能不是很好的情况下，这种情况会持续1秒，AOF也需要fork，但是通过调节重写日志文件的频率来提高数据集的耐久度。\n\n## AOF的优点\n* 使用AOF会让Redis更加耐久，通过使用不同的fsync策略：无fsync、每秒fsync或者每次写的时候fsync。使用默认的每秒fsync策略，Redis的性能依然很好（fsync是由后台线程进行处理的，主线程会尽力处理客户端请求），一旦出现故障，最多也就丢失1秒的数据。\n* AOF文件是一个只进行追加的日志文件，所以不需要写入索引，即使由于某些原因（磁盘空间已满，写的过程中宕机等等）未执行完整的写入命令，也也可使用redis-check-aof工具修复这些问题。\n* Redis 可以在 AOF 文件体积变得过大时，自动地在后台对 AOF 进行重写：重写后的新 AOF 文件包含了恢复当前数据集所需的最小命令集合。整个重写操作是绝对安全的，因为 Redis 在创建新 AOF 文件的过程中，会继续将命令追加到现有的 AOF 文件里面，即使重写过程中发生停机，现有的 AOF 文件也不会丢失。 而一旦新 AOF 文件创建完毕，Redis 就会从旧 AOF 文件切换到新 AOF 文件，并开始对新 AOF 文件进行追加操作。\n* AOF 文件有序地保存了对数据库执行的所有写入操作，这些写入操作以 Redis 协议的格式保存，因此 AOF 文件的内容非常容易被人读懂，对文件进行分析也很轻松。导出 AOF 文件也非常简单，举个例子，如果不小心执行了 FLUSHALL 命令，但只要 AOF 文件未被重写，那么只要停止服务器，移除 AOF 文件末尾的 FLUSHALL 命令，并重启 Redis，就可以将数据集恢复到 FLUSHALL 执行之前的状态。\n\n## AOF的缺点\n* 对于相同的数据集来说，AOF 文件的体积通常要大于 RDB 文件的体积。\n* 根据所使用的 fsync 策略，AOF 的速度可能会慢于 RDB。在一般情况下，每秒 fsync 的性能依然非常高，而关闭 fsync 可以让 AOF 的速度和 RDB 一样快，即使在高负荷之下也是如此。不过，即使在写负载很大的情况下，RDB仍然能够提供关于最大延迟的更多保证。\n\n## 如何配置Redis的持久化\nRDB持久化和AOF持久化都是在Redis配置文件`redis.conf`中配置的。默认情况下，Redis会开启RDB持久化，而关闭AOF持久化。\n\n以下是RDB持久化的默认配置\n```\n#   save \"\"\nsave 900 1\nsave 300 10\nsave 60 10000\n```\n如果想关闭RDB持久化，那么可以将以上配置改为：\n```\nsave \"\"\n#   save 900 1\n#   save 300 10\n#   save 60 10000\n```\n\n以下是AOF持久化的默认配置\n```\nappendonly no\n```\n如果想开启AOF持久化，那么可以将以上配置改为：\n```\nappendonly yes\n```\n\n也可以同时开启两种持久化方式，在这种情况下，当redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整。\n\n## 如何选择Redis的持久化方式\n* 如果Redis中的数据完全丢弃也没有关系，那么不进行任何持久化。\n* 如果能够接受5分钟或更多的数据丢失，选择RDB持久化方式对Redis的性能更加有利。\n* 如果只能接受秒级别的数据丢失，应该选择AOF持久化方式。", "title": "【Redis-5.0】持久化"}
}